import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

HELP_TEXT = """‚ÑπÔ∏è ‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶¨‡¶ø‡¶ß‡¶ø:

/schedule <group_id/group_link> <message>
  ‚û§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

/schedulemedia <group_id/group_link> <caption>
  ‚û§ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶π ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá (‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ attach ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶ì)

/delay <seconds>
  ‚û§ ‡¶¶‡ßÅ‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá

/stop
  ‚û§ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá
"""

scheduled_commands = []

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if len(msg.split()) < 3:
        return await update.message.reply_text("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /schedule <group_id> <message>")
    group = msg.split()[1]
    text = " ".join(msg.split()[2:])
    scheduled_commands.append({"type": "text", "group": group, "text": text})
    await update.message.reply_text(f"‚úÖ Scheduled message to {group}.")

async def schedule_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message or not update.message.reply_to_message.effective_attachment:
        return await update.message.reply_text("‚ùå ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶π ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶§‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶®‡•§")
    media = update.message.reply_to_message
    group = update.message.text.split()[1]
    caption = " ".join(update.message.text.split()[2:])
    scheduled_commands.append({"type": "media", "group": group, "media": media, "caption": caption})
    await update.message.reply_text(f"‚úÖ Scheduled media message to {group}.")

async def delay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if len(msg.split()) != 2 or not msg.split()[1].isdigit():
        return await update.message.reply_text("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /delay <seconds>")
    scheduled_commands.append({"type": "delay", "seconds": int(msg.split()[1])})
    await update.message.reply_text(f"‚úÖ Delay set to {msg.split()[1]} seconds.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scheduled_commands.clear()
    await update.message.reply_text("üõë All scheduled messages stopped.")

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("schedule", schedule))
app.add_handler(CommandHandler("schedulemedia", schedule_media))
app.add_handler(CommandHandler("delay", delay))
app.add_handler(CommandHandler("stop", stop))

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 8000)),
    webhook_url=WEBHOOK_URL,
)