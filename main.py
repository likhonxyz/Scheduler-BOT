# -*- coding: utf-8 -*-
from telethon.sessions import StringSession
from telethon import TelegramClient, events
import os
from dotenv import load_dotenv
import asyncio
from threading import Event

from keep_alive import keep_alive  # ‚úÖ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶®

# ‚úÖ Replit keep-alive server ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßã
keep_alive()

# ‡¶ï‡¶®‡¶´‡¶ø‡¶ó ‡¶≤‡ßã‡¶°
load_dotenv()

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶•‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
client = TelegramClient(
    StringSession(os.getenv('SESSION_STRING')),
    int(os.getenv('API_ID')),
    os.getenv('API_HASH')
)

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
is_sending = Event()
current_message = ""
send_interval = 300  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

@client.on(events.NewMessage(pattern='/start'))
async def handle_start(event):
    if event.sender_id == int(os.getenv('ADMIN_ID')):
        await event.reply('''
        üéõ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:
        /sendall <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú> - ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
        /stop - ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
        /setinterval <‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°> - ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        /status - ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
        ''')

@client.on(events.NewMessage(pattern='/sendall'))
async def handle_send_all(event):
    global current_message, is_sending
    if event.sender_id == int(os.getenv('ADMIN_ID')):
        message = event.raw_text.replace('/sendall', '').strip()
        if message:
            current_message = message
            is_sending.set()
            await event.reply(f"üîÉ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤: {send_interval} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°\n/stop ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®")
            await continuous_send()
        else:
            await event.reply("‚ö° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /sendall <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú>")

@client.on(events.NewMessage(pattern='/stop'))
async def handle_stop(event):
    global is_sending
    if event.sender_id == int(os.getenv('ADMIN_ID')):
        is_sending.clear()
        await event.reply("‚õî ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")

@client.on(events.NewMessage(pattern='/setinterval'))
async def handle_set_interval(event):
    global send_interval
    if event.sender_id == int(os.getenv('ADMIN_ID')):
        try:
            interval = int(event.raw_text.split()[1])
            if interval < 60:
                await event.reply("‚ö†Ô∏è ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 60 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá")
                return
            send_interval = interval
            await event.reply(f"üîÑ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {send_interval} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°")
        except (IndexError, ValueError):
            await event.reply("‚ö° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /setinterval <‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°>")

@client.on(events.NewMessage(pattern='/status'))
async def handle_status(event):
    if event.sender_id == int(os.getenv('ADMIN_ID')):
        status = "‡¶ö‡¶æ‡¶≤‡ßÅ ‚úÖ" if is_sending.is_set() else "‡¶¨‡¶®‡ßç‡¶ß ‚ùå"
        await event.reply(f'''
        üìä ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:
        ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ: {status}
        ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤: {send_interval} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°
        ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ: {current_message[:50] + '...' if current_message else 'N/A'}
        ''')

async def continuous_send():
    while is_sending.is_set():
        groups = os.getenv('GROUPS').split(',')
        success_count = 0
        
        for group in groups:
            if not is_sending.is_set():
                break
                
            try:
                await client.send_message(int(group), current_message)
                print(f"‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚Üí {group}")
                success_count += 1
            except Exception as e:
                print(f"‚ùå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ {group} ‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        
        print(f"üìä {success_count}/{len(groups)} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá")
        
        # ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        for _ in range(send_interval):
            if not is_sending.is_set():
                break
            await asyncio.sleep(1)

async def main():
    await client.start()
    print("üîπ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¨‡¶ü ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    client.loop.run_until_complete(main())
